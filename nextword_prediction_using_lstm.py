# -*- coding: utf-8 -*-
"""NextWord-Prediction-Using-LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NmVIpR0QqCs4dliwn9cwn3t1wqzsFhWB
"""

import keras 
from keras.preprocessing import sequence
import tensorflow as tf
import os
import numpy as np

path_to_file = tf.keras.utils.get_file('shakespeare.txt', 'https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt')

text = open(path_to_file, 'rb').read().decode(encoding='utf-8')
print(f"Length of text: {len(text)} characters")

print(text[:250])

vocab_size = sorted(set(text))
char2idx = {u:i for i, u in enumerate(vocab_size)}
idx2char = np.array(vocab_size)

def text_to_int(text):
  return np.array([char2idx[c] for c in text])
text_as_int = text_to_int(text)

"""For example, if vocab_size contains the characters ['a', 'b', 'c'], then enumerate(vocab_size) would return the sequence [(0, 'a'), (1, 'b'), (2, 'c')]. The dictionary comprehension {u:i for i, u in enumerate(vocab_size)} would then create the dictionary {'a': 0, 'b': 1, 'c': 2}."""

char2idx = {u:i for i, u in enumerate(vocab_size)}
print(char2idx)

print(f"Text: {text[:20]}")
print(f"Encoded text: {text_to_int(text[:13])}")

def int_to_text(ints):
  try:
    ints = ints.numpy()
  except:
    pass
  return ''.join(idx2char[ints])

print(int_to_text(text_as_int[:20]))

"""tf.data.Dataset.from_tensor_slices() function is used to convert the encoded text sequence (which is a NumPy array) into a TensorFlow dataset, which is a high-level API for managing data in TensorFlow."""

seq_length = 100
example_per_epochs = len(text) // (seq_length+1)

char_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)

## creating batches of 101 len
sequences = char_dataset.batch(seq_length+1, drop_remainder=True)

def split_input_target(chunk):
  input_text = chunk[:-1]
  target_text = chunk[1:]
  return input_text, target_text

dataset = sequences.map(split_input_target)

for x, y in dataset.take(2):
  print("\n\nExample\n")
  print("Input")  
  print(int_to_text(x))
  print("Output")
  print(int_to_text(y))

BATCH_SIZE = 64
VOCAB_SIZE = len(vocab_size)
EMBEDDING_DIMS = 256
RNN_UNITS = 1024
BUFFER_SIZE = 10000

data = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)

def build_model(vocab_size, embedding_dims, rnn_units,batch_size):
  model = tf.keras.Sequential([
      tf.keras.layers.Embedding(vocab_size, embedding_dims,
                                batch_input_shape = [batch_size, None]),
      tf.keras.layers.LSTM(
          rnn_units, return_sequences=True, stateful = True, recurrent_initializer='glorot_uniform'),
      tf.keras.layers.Dense(vocab_size)
      ])
  return model
model = build_model(VOCAB_SIZE, EMBEDDING_DIMS, RNN_UNITS,BATCH_SIZE)
model.summary()

for input_example_batch, target_example_batch in data.take(1):
  example_batch_prediction = model(input_example_batch)
  print(example_batch_prediction.shape, '#(batch size, sequence len, vocab size)')

print(len(example_batch_prediction))
print(example_batch_prediction)

pred = example_batch_prediction[0]
print(len(pred))
print(pred)

time_pred = pred[0]
print(len(time_pred))
print(time_pred)

sampled_indices = tf.random.categorical(pred, num_samples=1)

sampled_indices = np.reshape(sampled_indices, (1,-1))[0]
predicted_char = int_to_text(sampled_indices)
print(predicted_char)

"""" AaSaXJA;m;S.y$KvWyaIorO'ifjZiGTNzmvij$HrYFDAzNHpWILIKCZMCCximrjRQOaFDFBQT;Qo$;gIPu;,RK.J$rP
BSxm';tu " these are my predicted words
"""

def loss(labels, logits):
  return tf.keras.losses.sparse_categorical_crossentropy(labels, logits, from_logits=True)

model.compile(optimizer='adam', loss=loss)

checkpoint_dir = './training_checkpoints'
checkpoint_prefix = os.path.join(checkpoint_dir, 'ckpt_{epoch}')
checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath = checkpoint_prefix,
    save_weights_only=True
)

history = model.fit(data, epochs=20, callbacks=[checkpoint_callback])

model = build_model(VOCAB_SIZE, EMBEDDING_DIMS, RNN_UNITS, batch_size=1)

model.load_weights(tf.train.latest_checkpoint(checkpoint_dir))
model.build(tf.TensorShape([1, None]))

def generate_text(model, start_string):
  num_generate=800
  input_eval = [char2idx[s] for s in start_string]
  input_eval = tf.expand_dims(input_eval, 0)

  text_generated = []

  temperature = 1.0

  model.reset_states()
  for i in range(num_generate):
    predictions = model(input_eval)
    predictions = tf.squeeze(predictions, 0)

    predictions = predictions / temperature
    predicted_id = tf.random.categorical(predictions, num_samples=1)[-1,0].numpy()
    input_eval = tf.expand_dims([predicted_id], 0)
    text_generated.append(idx2char[predicted_id])

  return start_string + ''.join(text_generated)

inp = input("Type a starting string: ")
print(generate_text(model, inp))